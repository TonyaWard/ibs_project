#keep only subset of samples belonging to requested groups
new_map <- droplevels(as.data.frame(map[ix.keep,]))
#keep only samples that intersect between the map and otu table
intersect_btwn <- intersect(rownames(map),colnames(otu_table))
new_map <- map[intersect_btwn,]
new_otu <- droplevels(as.data.frame(otu_table[,intersect_btwn]))
taxa_level <- 2
taxa_level <- as.numeric(taxa_level)
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt.gz", sep="\t", row.names=1, check=F)
otu_table <- new_otu
View(otu_table)
View(new_otu)
otus_keep <- intersect(rownames(otu_table),rownames(gg_taxonomy))
gg_taxonomy <- gg_taxonomy[otus_keep,, drop=F]
View(gg_taxonomy)
class(rownames(otu_table))
rownames(gg_taxonomy)
otu_table <- as.matrix(read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/IMG_otu.txt", sep='\t', head=T, row=1, check=F, comment='', skip=1))
map <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/HMP_map.txt",sep='\t',head=T,row=1,check=F,comment='')
map_column <- "HMPBODYSUBSITE"
groups <- unique(map[,map_column])
groups <- lapply(groups, as.character)
#factor groups so they appear in user-listed order
map[,map_column] <- factor(map[,map_column],groups)
#Drop any samples with no OTUs
otu_table <- otu_table[,colSums(otu_table) > 1]
#get indices of which rows to keep
ix.keep <- map[,map_column] %in% groups
#keep only subset of samples belonging to requested groups
new_map <- droplevels(as.data.frame(map[ix.keep,]))
#keep only samples that intersect between the map and otu table
intersect_btwn <- intersect(rownames(map),colnames(otu_table))
new_map <- map[intersect_btwn,]
new_otu <- droplevels(as.data.frame(otu_table[,intersect_btwn]))
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt.gz", sep="\t", row.names=1, check=F)
rownames(new_otu)
rownames(gg_taxonomy)
rownames(new_otu) %in% rownames(gg_taxonomy)
rownames(new_otu)
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt", sep="\t", row.names=1, check=F)
rownames(new_otu) %in% rownames(gg_taxonomy)
rownames(new_otu)
rownames(gg_taxonomy)
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt", sep="\t",check=F)
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt", sep="\t",check=F, quote='')
View(gg_taxonomy)
otu_table
View(new_otu)
otu_table <- as.matrix(read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/IMG_otu.txt", sep='\t', head=T, row=1, check=F, comment='', skip=1))
map <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/HMP_map.txt",sep='\t',head=T,row=1,check=F,comment='')
map_column <- "HMPBODYSUBSITE"
groups <- unique(map[,map_column])
groups <- lapply(groups, as.character)
#factor groups so they appear in user-listed order
map[,map_column] <- factor(map[,map_column],groups)
#Drop any samples with no OTUs
otu_table <- otu_table[,colSums(otu_table) > 1]
#get indices of which rows to keep
ix.keep <- map[,map_column] %in% groups
#keep only subset of samples belonging to requested groups
new_map <- droplevels(as.data.frame(map[ix.keep,]))
#keep only samples that intersect between the map and otu table
intersect_btwn <- intersect(rownames(map),colnames(otu_table))
new_map <- map[intersect_btwn,]
new_otu <- droplevels(as.data.frame(otu_table[,intersect_btwn]))
View(new_otu)
otu_table <- new_otu
otu_table <- t(otu_table)
otu_table <- sweep(otu_table, 1, rowSums(otu_table), FUN='/')
otus_keep <- intersect(colnames(otu_table),rownames(trait_table))
otu_table <- otu_table[,otus_keep,drop=F]
trait_table <- trait_table[otus_keep,,drop=F]
otu_table <- t(otu_table)
otus_keep <- intersect(rownames(otu_table),rownames(gg_taxonomy))
gg_taxonomy <- gg_taxonomy[otus_keep,, drop=F]
otu_table <- as.matrix(read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/IMG_otu.txt", sep='\t', head=T, row=1, check=F, comment='', skip=1))
map <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/doc/data/HMP_map.txt",sep='\t',head=T,row=1,check=F,comment='')
map_column <- "HMPBODYSUBSITE"
groups <- unique(map[,map_column])
groups <- lapply(groups, as.character)
#factor groups so they appear in user-listed order
map[,map_column] <- factor(map[,map_column],groups)
#Drop any samples with no OTUs
otu_table <- otu_table[,colSums(otu_table) > 1]
#get indices of which rows to keep
ix.keep <- map[,map_column] %in% groups
#keep only subset of samples belonging to requested groups
new_map <- droplevels(as.data.frame(map[ix.keep,]))
#keep only samples that intersect between the map and otu table
intersect_btwn <- intersect(rownames(map),colnames(otu_table))
new_map <- map[intersect_btwn,]
new_otu <- droplevels(as.data.frame(otu_table[,intersect_btwn]))
otu_table <- new_otu
otu_table <- t(otu_table)
otu_table <- sweep(otu_table, 1, rowSums(otu_table), FUN='/')
otus_keep <- intersect(colnames(otu_table),rownames(trait_table))
otu_table <- otu_table[,otus_keep,drop=F]
View(otu_table)
gg_taxonomy <- read.table("Documents/Docs/dev/BugBase_Git/BugBase/usr/img_otu_taxonomy.txt", sep="\t", row.names=1, check=F, quote='')
otu_table <- t(otu_table)
otus_keep <- intersect(rownames(otu_table),rownames(gg_taxonomy))
gg_taxonomy <- gg_taxonomy[otus_keep,, drop=F]
names_split <- array(dim=c(length(gg_taxonomy[,1]), 7))
otu_names <- as.character(gg_taxonomy[,1])
for(i in 1:length(otu_names)){
names_split[i,] <- strsplit(otu_names[i], ";", fixed=T)[[1]]
}
otu_names <- names_split[,taxa_level]
for(i in 1:length(otu_names)){
otu_names[i] <- strsplit(otu_names[i], "__", fixed=T)[[1]][2]
}
names_split[,taxa_level] <- otu_names
for(i in 1:nrow(names_split)){
if(is.na(names_split[i,taxa_level])){
if(taxa_level > 1){
names_split[i, taxa_level] <- names_split[i, taxa_level -1]
} else {
names_split[i, taxa_level] <- "unknown"
}
}
}
otu_table1 <- otu_table
View(otu_table1)
rownames(otu_table) <- names_split[,taxa_level]
otu_table <- t(sapply(by(otu_table,rownames(otu_table),colSums),identity))
View(otu_table)
map <- map[colnames(otu_table),]
cols <- colorRampPalette(brewer.pal(9,'Set1'))
cols2 <- cols(length(rownames(otu_table)))
names(cols2) <- unique(rownames(otu_table))
cols2 <- c(cols2,"#C0C0C0")
names(cols2)[length(cols2)] <- "Other"
taxa_list <- c()
for(x in 1:length(traits)){
trait <- traits[x]
positive_otu_table <- t(sweep(t(otu_table1), 2,
otus_contributing[,x],"*"))
rownames(positive_otu_table) <- names_split[,taxa_level]
positive_otu_table <- t(sapply(by(positive_otu_table,
rownames(positive_otu_table),colSums),identity))
#ensure same order of samples in map and otu table
map <- map[colnames(positive_otu_table),]
#melt the otu_table by sample id
melted_otu_table <- melt(positive_otu_table)
colnames(melted_otu_table) <- c("Taxa", "SampleID", "Count")
#merge the otu table and mapping file
map$SampleID <- rownames(map)
melted_otu_table <- merge(melted_otu_table, map, by="SampleID")
#collapse by groups in the map column
group_collapsed_otus <- ddply(melted_otu_table,
.(Taxa,melted_otu_table[,map_column]),
summarize, Count = mean(Count))
colnames(group_collapsed_otus)[2] <- map_column
#set value for cutoff (1/10 of the highest proportion)
max_abund <- max(group_collapsed_otus$Count)
cutoff_val <- max_abund / 10
#call taxa that are less than cutoff of the population "Other"
group_collapsed_otus$Taxa <- as.character(group_collapsed_otus$Taxa)
group_collapsed_otus$Count <- as.numeric(group_collapsed_otus$Count)
group_collapsed_otus[which(group_collapsed_otus$Count < cutoff_val),
"Taxa"] <- "Other"
#re-collapse to group the 'Others'
group_collapsed_otus <- ddply(group_collapsed_otus,
.(Taxa,group_collapsed_otus[,2]),
summarize, Count = sum(Count))
colnames(group_collapsed_otus)[2] <- map_column
taxa_list <- c(taxa_list, unique(group_collapsed_otus$Taxa))
group_collapsed_otus[,map_column] <- as.numeric(as.character(group_collapsed_otus[,map_column]))
group_collapsed_otus <- group_collapsed_otus[order(group_collapsed_otus[,map_column]),]
group_collapsed_otus[,map_column] <- as.character(group_collapsed_otus[,map_column])
#make the plot
taxa_plot <- NULL
taxa_plot <- ggplot(group_collapsed_otus, aes_string(x = map_column,
y = "Count", fill="Taxa")) +
geom_bar(stat="identity", show_guide=FALSE) +
labs(y = "Relative Abundance", x = "") +
theme_classic() +
theme(axis.line.x = element_line(colour = 'black', size=0.5,
linetype='solid'), axis.line.y = element_line(colour = 'black',
size=0.5, linetype='solid')) +
scale_fill_manual(values=cols2)
#assign pdf name
file <- c(".pdf")
name <- paste(trait, ".pdf", sep='')
name <- paste(dir, name, sep="/")
#make the pdf
pdf(name, height=6,width=6)
par(mar=c(8,4,0.5,6), oma=c(0.1,0.1,0.1,0.1), mgp=c(1.5,0.5,0))
# Plot the taxa summary
print(taxa_plot)
dev.off()
}
x
positive_otu_table <- t(sweep(t(otu_table1), 2,
otus_contributing[,x],"*"))
View(positive_otu_table)
rownames(positive_otu_table) <- names_split[,taxa_level]
View(positive_otu_table)
positive_otu_table <- t(sapply(by(positive_otu_table,
rownames(positive_otu_table),colSums),identity))
View(positive_otu_table)
map <- map[colnames(positive_otu_table),]
View(map)
melted_otu_table <- melt(positive_otu_table)
colnames(melted_otu_table) <- c("Taxa", "SampleID", "Count")
View(melted_otu_table)
map$SampleID <- rownames(map)
melted_otu_table <- merge(melted_otu_table, map, by="SampleID")
View(melted_otu_table)
group_collapsed_otus <- ddply(melted_otu_table,
.(Taxa,melted_otu_table[,map_column]),
summarize, Count = mean(Count))
colnames(group_collapsed_otus)[2] <- map_column
View(group_collapsed_otus)
max_abund <- max(group_collapsed_otus$Count)
cutoff_val <- max_abund / 10
group_collapsed_otus$Taxa <- as.character(group_collapsed_otus$Taxa)
group_collapsed_otus$Count <- as.numeric(group_collapsed_otus$Count)
group_collapsed_otus[which(group_collapsed_otus$Count < cutoff_val),
"Taxa"] <- "Other"
View(group_collapsed_otus)
group_collapsed_otus <- ddply(group_collapsed_otus,
.(Taxa,group_collapsed_otus[,2]),
summarize, Count = sum(Count))
colnames(group_collapsed_otus)[2] <- map_column
taxa_list <- c(taxa_list, unique(group_collapsed_otus$Taxa))
group_collapsed_otus[,map_column] <- as.numeric(as.character(group_collapsed_otus[,map_column]))
View(group_collapsed_otus)
map <- read.table("Dropbox/Marty_Data/929Tmap_adiv_SG.txt", sep='\t', head=T, comment='')
View(map)
map <- read.table("Dropbox/Marty_Data/929Tmap_adiv_SG.txt", sep='\t', head=T, comment='', row=1)
colnames(map)
unique(map$Description)
unique(map$Source)
which(map$Source =="blank")
map$Source =="blank"
colnames(map)
unique(map$Timepoint)
unique(map$Week)
unique(map$MouseID)
plot(c(1:5))
x <- plot(c(1:5))
x
tst1 <- sum(1:10)
tst1
1+2+3+4+5+6+7+8+9+10
?data.frame()
distance_table <- data.frame(x=1, y=1:4)
View(distance_table)
distance_table <- data.frame(x=1:4, y=1)
View(distance_table)
View(distance_table)
?complete.cases()
library("vegan")
library("vegan")
library("biom")
library("RColorBrewer")
library("vegan")
library("ggplot2")
library("reshape2")
library("plyr")
library('beeswarm')
library('ape')
library("grid")
library("gridExtra")
library("cowplot")
library("stringr")
source('bin/output_dir.r')
#Find the data
data_dir <- "data/"
#OTU table keeps samples with min 100 counts and CSS normalized with
#QIIME 1.9.1's normalize_table.py (css)
#otu_fp <- paste(data_dir, "ninTable100_CSS.json.biom", sep='')
##OTU table is not normalized or filtered at all
otu_fp <- paste(data_dir, "ninja_otutable_newCut_meta2.biom", sep='')
######################################################################
#Load OTU table and metadata
#otu table is OTU ID (rows) x sample ID (columns)
#dimensions = 324 samples and  232 otus
otutable <- as.matrix(biom_data(read_biom(otu_fp)))
colnames(otutable) <- paste(colnames(otutable), "s", sep="_")
#metadata is samples (rows) x metadata category (columns) (324 samples)
metadata <- sample_metadata(read_biom(otu_fp))
write.table(metadata, "map.txt", quote=FALSE, sep="\t",col.names=NA)
rownames(metadata) <- paste(rownames(metadata), "s", sep="_")
metadata$SampleID <- as.character(rownames(metadata))
#taxonomy is OTU_ID by taxonomy level
taxonomy <- observation_metadata(read_biom(otu_fp))
taxonomy$taxonomy7 <- sapply(strsplit(taxonomy$taxonomy7, split='__', fixed=TRUE), function(x) (x[2]))
#run source tracker (this is done on it's own)
#Rscript sourcetracker_for_qiime.r -i ../data/otu-table-source-tracker.txt -m ../data/map-source-tracker.txt -o st
#load source tracker otu table
#st_otu <- t(read.table("data/Unknown_contributions.txt", sep="\t", header=TRUE, comment='', row.names=1))
######################################################################
#Filter and normalize
##Filter to keep samples that have a minimum of 50 counts
##keep singletons that occur only in more than one sample (232 to 142)
otutable1 <- otutable[rowSums(otutable > 0) > 1,]
##keep samples with at least 50 sequence counts (324 to 279), and
otutable2 <- otutable1[,colSums(otutable1) > 50]
##convert to relative abundance
otutable_RA <- sweep(otutable2,2,colSums(otutable2),`/`) #142 OTUs, 279 samples
#otutable_counts <- otutable2 # 142 OTUs, 279 samples
#keep only OTUs that are in the samples remaining
otutable_RA <- otutable_RA[rowSums(otutable_RA) > 0,] # 142 OTUs, 279 samples
#otutable_counts <- otutable[rowSums(otutable) > 0,] # 231 OTUs, 260 samples
######################################################################
##Make an OTU table output that is compatible with the ghost tree
#Use this for alpha and beta
otutable_output <- round(otutable_RA * 10000) #unifrac doesn't like decimals!
#Must replace under scores with spaces in OTU IDS, because newick doesn't read them properly
new_names <- rownames(otutable_output)
rownames(otutable_output) <- str_replace_all(new_names,"_"," ")
#Write file to output
sink("data/fungal_RA_wholenum.txt")
cat("#OTUID")
write.table(otutable_output,
sep="\t", #tell R to make is tab-delimited
quote=F, #tell R not to put quotes
col.names=NA) #formats the column headers properly
sink()
######################################################################
#Remove positive and negative control
#Store the positive and negative values
controls <- c("Negative_s", "Positive_s")
control_table <- cbind(otutable_RA[,"Negative_s"], otutable_RA[,"Positive_s"])
colnames(control_table) <- controls
otutable_RA <- otutable_RA[, ! colnames(otutable_RA) %in% controls] #Now 277 samples
######################################################################
#Filter the metadata to keep only samples in the new otutable
#Remove infants that are innoculated
ids_keep <- intersect(rownames(metadata), colnames(otutable_RA))
mapping <- metadata[ids_keep,]
####Add taxonomy at species level to OTU table####
t_table <- otutable_RA
taxonomy2 <- taxonomy[intersect(rownames(taxonomy), rownames(t_table)),]
rownames(t_table) <- taxonomy2$taxonomy7
#Collapse same taxonomies (from 226 to 189)
taxa_table <- aggregate(t_table[,1:ncol(t_table)], by=list(rownames(t_table)), FUN = sum)
rownames(taxa_table) <- taxa_table[,1]
taxa_table <- taxa_table[,2:ncol(taxa_table)] #Taxa table is 123 otus x 277 samples
mapping$nTaxa <- as.factor(colSums(taxa_table > 0))
mapping$nOTUs <- as.factor(colSums(otutable_RA > 0))
#Collapse taxa by correlation
#move forward with this collapsed taxa table (it replaces taxa_table and otutable_counts with a new versions)
#new otu table = 190 OTUs
#new taxa_table = 163 taxa
#took out those with a .95 correlation
source('bin/corr.network.r')
####Add taxonomy for control table####
taxonomy3 <- taxonomy[intersect(rownames(taxonomy), rownames(control_table)),]
rownames(control_table) <- taxonomy3$taxonomy7
control_taxa <- aggregate(control_table[,1:ncol(control_table)], by=list(rownames(control_table)), FUN = sum)
rownames(control_taxa) <- control_taxa[,1]
control_taxa <- control_taxa[,2:ncol(control_taxa)]
control_taxa <- control_taxa[rowSums(control_taxa) > 0,] #There are 18 taxa in these samples, all of which overlap with taxa table
####Remove potential contaminants
#potential_contams <- rownames(control_taxa[control_taxa$Negative_s >2,])
#taxa_table <- taxa_table[! rownames(taxa_table) %in% potential_contams,]
######################################################################
#Generate alpha and beta diveristy and load them
#Change the output otu table to biom from command line
#with qiime/1.9.0
# biom convert -i fungal_RA_wholenum.txt -o fungal_RA_wholenum.biom --to-json --table-type "OTU table"
#use the get_otus_from_ghost_tree.py script (mod the path to the tree you care about)
#the tree we want to use is the 0116_s/dynamic_100_ghost_tree tree
# python get_otus_from_ghost_tree.py
#### !!! !!!!replace underscores with spaces in file
#transfer the tree, RA OTU table and trim list to MSI
#qiime 1.8.0
# filter_otus_from_otu_table.py -i fungal_RA_wholenum.biom -o fungal_trimmed_RA_wholenum.biom -e ghost_tree_tips_underscore_fix.txt --negate_ids_to_exclude
#run Beta with trimmed output
#beta_diversity.py -i fungal_trimmed_RA_wholenum.biom -o MG_Fungal_Beta -m bray_curtis,unifrac,weighted_unifrac -t ghost_tree.nwk
#run alpha with trimmed output
#alpha_diversity.py -i fungal_trimmed_RA_wholenum.biom -o MG_Fungal_Alpha.txt -m shannon,simpson,observed_species,PD_whole_tree -t ghost_tree.nwk
#Transfer these to the data/ directory
alpha <- read.table("data/MG_Fungal_Alpha.txt",
sep='\t',
header=T,
row=1)
bray <- read.table("data/MG_Fungal_Beta/bray_curtis_fungal_trimmed_RA_wholenum.txt",
sep="\t",
header=T,
row=1,
check.names=F)
unifrac <- read.table("data/MG_Fungal_Beta/unifrac_fungal_trimmed_RA_wholenum.txt",
sep="\t",
header=T,
row=1,
check.names=F)
wunifrac <- read.table("data/MG_Fungal_Beta/weighted_unifrac_fungal_trimmed_RA_wholenum.txt",
sep="\t",
header=T,
row=1,
check.names=F)
######################################################################
####Get sample IDs for testing####
#Take out the innoculated babies
Innoc <- rownames(mapping[mapping$Delivery_Vvaginal_Ccs_IcsInoc == "I",])
mapping <- mapping[!rownames(mapping) %in% Innoc,] #277 to 223 samples
otutable_RA<- otutable_RA[,rownames(mapping)]
taxa_table <- taxa_table[,rownames(mapping)]
alpha <- alpha[rownames(mapping),]
bray <- bray[rownames(mapping), rownames(mapping)]
unifrac <- unifrac[rownames(mapping), rownames(mapping)]
wunifrac <- wunifrac[rownames(mapping), rownames(mapping)]
#Store bodysites
Skin <- rownames(mapping[mapping$SuperbodysiteOralSkinNoseVaginaAnalsAureola =="Skin",])
Oral_All <- rownames(mapping[mapping$SuperbodysiteOralSkinNoseVaginaAnalsAureola =="Oral",])
Vagina <- rownames(mapping[mapping$SuperbodysiteOralSkinNoseVaginaAnalsAureola =="Vaginal",])
Anal_B <- intersect(rownames(mapping[mapping$SuperbodysiteOralSkinNoseVaginaAnalsAureola =="Anal",]), rownames(mapping[mapping$motherorbaby_M_B == "B",]))
Anal_M <- intersect(rownames(mapping[mapping$SuperbodysiteOralSkinNoseVaginaAnalsAureola =="Anal",]),rownames(mapping[mapping$motherorbaby_M_B == "M",]))
#Store mom and babies
Mom <- rownames(mapping[mapping$motherorbaby_M_B == "M",])
Infant <- rownames(mapping[mapping$motherorbaby_M_B == "B",])
#Store birth mode
Vaginal <- rownames(mapping[mapping$Delivery_Vvaginal_Ccs_IcsInoc =="V",])
Csection <- rownames(mapping[mapping$Delivery_Vvaginal_Ccs_IcsInoc =="C",])
#Innoc <- rownames(mapping[mapping$Delivery_Vvaginal_Ccs_IcsInoc == "I",])
#Store Day Collected
Days_avail <- unique(mapping$planned_sampling_day_0_1_3_7_14_30_60_90___365)
Days <- list()
for(i in 1:length(Days_avail)){
working_day <- Days_avail[i]
Day_samples <- list(rownames(mapping[mapping$planned_sampling_day_0_1_3_7_14_30_60_90___365 == working_day,]))
Days <- c(Days, Day_samples)
names(Days)[i] <- working_day
}
day_1 <- Days[[1]]
day_3 <- Days[[2]]
#Keep the "before feed" to be oral samples UNLESS there is no before feed sample
BeforeFeed <- rownames(mapping[mapping$Description == "Mouthswabbeforefeeding",])
AfterFeed <- rownames(mapping[mapping$Description == "Mouthswabafterfeeding",])
Oral <- BeforeFeed
for(i in 1:length(Days)){
day_samples <- Days[[i]]
mapsubset <- mapping[rownames(mapping) %in% day_samples,]
babies_before <- mapsubset[mapsubset$Description == "Mouthswabbeforefeeding",]$subject_id
babies_after <- mapsubset[mapsubset$Description == "Mouthswabafterfeeding",]$subject_id
duplicates <- intersect(babies_before, babies_after)
ndup_samples <- rownames(mapsubset[!mapsubset$subject_id %in% duplicates,])
Keep_after <- intersect(ndup_samples, AfterFeed)
Oral <- c(Oral, Keep_after)
}
#Store families
fams <- unique(mapping$familyN)
Families <- list()
for(f in 1:length(fams)){
Families <- c(Families,  list(rownames(mapping[mapping$familyN == fams[f],])))
names(Families)[f] <- fams[f]
}
#List Baby and mom body sites and delivery modes
Bodysites_B <- list(Skin, Oral, Anal_B)
names(Bodysites_B) <- c("Skin", "Oral", "Anal_B")
Bodysites_M <- list(Anal_M, Vagina)
names(Bodysites_M) <- c("Anal_M", "Vagina")
#D_Mode <- list(Vaginal, Csection, Innoc)
#names(D_Mode) <- c("Vaginal", "Csection", "Innoc")
D_Mode <- list(Vaginal, Csection)
names(D_Mode) <- c("Vaginal", "Csection")
# #Make the Day 1 timepoint full with Day 3 and Day 1 with no overlap
# day1 <- Days[[1]]
# for(i in 1:length(Bodysites_B)){
#   working_bs <- Bodysites_B[[i]]
#   mapsubset <- mapping[rownames(mapping) %in% working_bs,]
#   babies_day1 <- mapsubset[mapsubset$planned_sampling_day_0_1_3_7_14_30_60_90___365 == "1",]$subject_id
#   babies_day3 <- mapsubset[mapsubset$planned_sampling_day_0_1_3_7_14_30_60_90___365 == "3",]$subject_id
#   duplicates <- intersect(babies_day1, babies_day3)
#   ndup_samples <- rownames(mapsubset[!mapsubset$subject_id %in% duplicates,])
#   Keep_after <- intersect(ndup_samples, Days[[2]])
#   day1 <- c(day1, Keep_after)
# }
#
# Days <- Days[2:6]
# Days[[1]] <- day1
# names(Days)[1] <- "1"
####Add Taxa quantiles to mapping###
ranges <- c(0, 0.001, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
mapping <- cbind(mapping, t(taxa_table))
taxa <- colnames(t(taxa_table))
for(i in 1:nrow(mapping)){
sample_id <- rownames(mapping)[i]
for(k in 1:length(taxa)){
taxon <- taxa[k]
for(m in 1:13){
if((mapping[sample_id, taxon] >= ranges[m]) && (mapping[sample_id, taxon] < ranges[m])){
mapping[sample_id, taxon] <- ranges[m]
next
}
}
}
}
colnames(mapping) <- gsub(" ", "_", colnames(mapping))
####Set Colors####
#cols <- brewer.pal(8,'Paired')
cols <- c("#cb1b4a", "#42aeb8", "#FDB316", "#c3c823", "#00797e", "#053058", "#aaada6", "#ae1848", "#368b90", "#ca9012", "#9ba11e", "#f1f2ec", "#d9d3df", "#348fbe", "#ff8340", "#ffAf40", "#bf503f", "#951b72", "#b75f6d")
cols2 <- colorRampPalette(cols)
cols_grad <- colorRampPalette(brewer.pal(8,"Paired"))
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
packageVersion('phyloseq')
?merge
?save_plot
library(cowplot)
?save_plot
?save_plot
?strsplit
which.max()
setwd("Desktop/files/IBS-files/ibs_project/data/IBS_Mayo_secondrun/")
otu_table <-as.matrix(read.table("ibs_tax.txt", sep='\t', head=T, row=1,
check=F, comment=''))
View(otu_table)
